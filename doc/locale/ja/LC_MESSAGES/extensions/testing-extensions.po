# 
msgid ""
msgstr ""
"Project-Id-Version: sphinx test 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-19 15:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../extensions/testing-extensions.rst:2
msgid "Testing extensions"
msgstr ""

#: ../../extensions/testing-extensions.rst:4
msgid ""
"CKAN extensions can have their own tests that are run using ``nosetests`` in"
" much the same way as running CKAN's own tests (see "
":doc:`/contributing/test`)."
msgstr ""

#: ../../extensions/testing-extensions.rst:7
msgid ""
"Continuing with our :doc:`example_iauthfunctions extension <tutorial>`, "
"first we need a CKAN config file to be used when running our tests. Create "
"the file ``ckanext-iauthfunctions/test.ini`` with the following contents::"
msgstr ""

#: ../../extensions/testing-extensions.rst:15
msgid ""
"The ``use`` line declares that this config file inherits the settings from "
"the config file used to run CKAN's own tests (``../ckan`` should be the path"
" to your CKAN source directory, relative to your ``test.ini`` file)."
msgstr ""

#: ../../extensions/testing-extensions.rst:19
msgid ""
"The ``test.ini`` file is a CKAN config file just like your |development.ini|"
" and |production.ini| files, and it can contain any :doc:`CKAN config file "
"settings </maintaining/configuration>` that you want CKAN to use when "
"running your tests, for example::"
msgstr ""

#: ../../extensions/testing-extensions.rst:29
msgid "Next, make the directory that will contain our test modules::"
msgstr ""

#: ../../extensions/testing-extensions.rst:33
msgid ""
"Finally, create the file ``ckanext-"
"iauthfunctions/ckanext/iauthfunctions/tests/test_iauthfunctions.py`` with "
"the following contents:"
msgstr ""

#: ../../extensions/testing-extensions.rst:40
msgid ""
"To run these extension tests, ``cd`` into the ``ckanext-iauthfunctions`` "
"directory and run this command::"
msgstr ""

#: ../../extensions/testing-extensions.rst:45
msgid "Some notes on how these tests work:"
msgstr ""

#: ../../extensions/testing-extensions.rst:47
msgid ""
"Nose has lots of useful functions for testing, see the `nose documentation "
"<https://nose.readthedocs.org/en/latest/>`_."
msgstr ""

#: ../../extensions/testing-extensions.rst:50
msgid ""
"We're using a :class:`paste.fixture.TestApp` object to simulate sending HTTP"
" requests to the CKAN API or frontend. See `Testing Applications with Paste "
"<http://pythonpaste.org/testing-applications.html>`_ for some documentation "
"of this."
msgstr ""

#: ../../extensions/testing-extensions.rst:55
msgid ""
"We're calling :func:`ckan.tests.call_action_api` to post (simulated) HTTP "
"requests to the CKAN API. This is a convenience function that CKAN provides "
"for its own tests."
msgstr ""

#: ../../extensions/testing-extensions.rst:59
msgid ""
"You might also find it useful to read the `Pylons testing documentation "
"<http://docs.pylonsproject.org/projects/pylons-"
"webframework/en/latest/testing.html>`_."
msgstr ""

#: ../../extensions/testing-extensions.rst:62
msgid ""
"The Pylons book also has a `chapter on testing "
"<http://pylonsbook.com/en/1.0/testing.html>`_."
msgstr ""

#: ../../extensions/testing-extensions.rst:64
msgid ""
"Avoid importing the plugin modules directly into your test modules (e.g from"
" example_iauthfunctions import plugin_v5_custom_config_setting). This causes"
" the plugin to be registered and loaded before the entire test run, so the "
"plugin will be loaded for all tests. This can cause conflicts and test "
"failures."
msgstr ""
