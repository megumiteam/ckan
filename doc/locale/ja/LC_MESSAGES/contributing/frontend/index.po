# 
msgid ""
msgstr ""
"Project-Id-Version: sphinx test 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-19 15:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../contributing/frontend/index.rst:3
msgid "Frontend development guidelines"
msgstr ""

#: ../../contributing/frontend/index.rst:16
msgid ":doc:`/contributing/string-i18n`"
msgstr ""

#: ../../contributing/frontend/index.rst:17
msgid "How to mark strings for translation."
msgstr ""

#: ../../contributing/frontend/index.rst:21
msgid "Install frontend dependencies"
msgstr ""

#: ../../contributing/frontend/index.rst:23
msgid ""
"The front end stylesheets are written using `LESS <http://lesscss.org/>`_ "
"(this depends on `node.js <http://nodejs.org/>`_ being installed on the "
"system)"
msgstr ""

#: ../../contributing/frontend/index.rst:27
msgid ""
"Instructions for installing node can be found on the `node.js website "
"<http://nodejs.org/>`_. On Ubuntu node.js (and npm node.js's package "
"manager) can be installed using the following command:"
msgstr ""

#: ../../contributing/frontend/index.rst:35
msgid ""
"LESS can then be installed via the node package manager which is bundled "
"with node (or installed with apt as it is not bundled with node.js on "
"Ubuntu). We also use ``nodewatch`` to make our LESS compiler a watcher style"
" script."
msgstr ""

#: ../../contributing/frontend/index.rst:40
msgid "``cd`` into the ``pyenv/src/ckan`` and run:"
msgstr ""

#: ../../contributing/frontend/index.rst:48
msgid "File structure"
msgstr ""

#: ../../contributing/frontend/index.rst:50
msgid ""
"All front-end files to be served via a web server are located in the "
"``public`` directory (in the case of the new CKAN base theme it's "
"``public/base``)."
msgstr ""

#: ../../contributing/frontend/index.rst:84
msgid ""
"All files and directories should be lowercase with hyphens used to separate "
"words."
msgstr ""

#: ../../contributing/frontend/index.rst:88
msgid "css"
msgstr ""

#: ../../contributing/frontend/index.rst:88
msgid ""
"Should contain any site specific CSS files including compiled production "
"builds generated by LESS."
msgstr ""

#: ../../contributing/frontend/index.rst:92
msgid "less"
msgstr ""

#: ../../contributing/frontend/index.rst:91
msgid ""
"Should contain all the less files for the site. Additional vendor styles "
"should be added to the *vendor* directory and included in main.less."
msgstr ""

#: ../../contributing/frontend/index.rst:96
msgid "javascript"
msgstr ""

#: ../../contributing/frontend/index.rst:95
msgid ""
"Should contain all website files. These can be structured appropriately. It "
"is recommended that *main.js* be used as the bootstrap filename that sets up"
" the page."
msgstr ""

#: ../../contributing/frontend/index.rst:103
msgid "vendor"
msgstr ""

#: ../../contributing/frontend/index.rst:99
msgid ""
"Should contain all external dependencies. These should not contain version "
"numbers in the filename. This information should be available in the header "
"comment of the file. Library plugins should be prefixed with the library "
"name. If a dependency has many files (such as bootstrap) then the entire "
"directory should be included as distributed by the maintainer."
msgstr ""

#: ../../contributing/frontend/index.rst:108
msgid "test"
msgstr ""

#: ../../contributing/frontend/index.rst:106
msgid ""
"Contains the test runner *index.html*. *vendor* contains all test "
"dependencies and libraries. *spec* contains the actual test files. Each test"
" file should be the filename with *.spec* appended."
msgstr ""

#: ../../contributing/frontend/index.rst:112
msgid "Stylesheets"
msgstr ""

#: ../../contributing/frontend/index.rst:114
msgid ""
"Because all the stylesheets are using LESS we need to compile them before "
"beginning development. In production CKAN will look for the ``main.css`` "
"file which is included in the repository. In development CKAN looks for the "
"file ``main.debug.css`` which you will need to generate by running:"
msgstr ""

#: ../../contributing/frontend/index.rst:124
msgid ""
"This will watch for changes to all of the less files and automatically "
"rebuild the CSS for you. To quit the script press ``ctrl-c``. There is also "
"``--production`` flag for compiling the production ``main.css``."
msgstr ""

#: ../../contributing/frontend/index.rst:128
msgid ""
"There are many LESS files which attempt to group the styles in useful "
"groups. The main two are:"
msgstr ""

#: ../../contributing/frontend/index.rst:134
msgid "main.less:"
msgstr ""

#: ../../contributing/frontend/index.rst:132
msgid ""
"This contains *all* the styles for the website including dependancies and "
"local styles. The only files that are excluded here are those that are "
"conditionally loaded such as IE only CSS and large external apps (like "
"recline) that only appear on a single page."
msgstr ""

#: ../../contributing/frontend/index.rst:137
msgid "ckan.less:"
msgstr ""

#: ../../contributing/frontend/index.rst:137
msgid "This includes all the local ckan stylesheets."
msgstr ""

#: ../../contributing/frontend/index.rst:140
msgid ""
"Whenever a CSS change effects ``main.less`` it's important than after the "
"merge into master that a ``$ ./bin/less --production`` should be run and "
"commited."
msgstr ""

#: ../../contributing/frontend/index.rst:144
msgid ""
"There is a basic pattern primer available at: "
"http://localhost:5000/testing/primer/ that shows all the main page elements "
"that make up the CKAN core interface."
msgstr ""

#: ../../contributing/frontend/index.rst:150
msgid "JavaScript"
msgstr ""

#: ../../contributing/frontend/index.rst:152
msgid "The core of the CKAN JavaScript is split up into three areas."
msgstr ""

#: ../../contributing/frontend/index.rst:154
msgid "Core (such as i18n, pub/sub and API clients)"
msgstr ""

#: ../../contributing/frontend/index.rst:155
msgid ":doc:`javascript-module-tutorial` (small HTML components or widgets)"
msgstr ""

#: ../../contributing/frontend/index.rst:156
msgid "jQuery Plugins (very small reusable components)"
msgstr ""

#: ../../contributing/frontend/index.rst:159
msgid "Core"
msgstr ""

#: ../../contributing/frontend/index.rst:161
msgid ""
"Everything in the CKAN application lives on the ``ckan`` namespace. "
"Currently there are four main components that make up the core."
msgstr ""

#: ../../contributing/frontend/index.rst:164
#: ../../contributing/frontend/index.rst:170
msgid "Modules"
msgstr ""

#: ../../contributing/frontend/index.rst:165
msgid "Publisher/Subscriber"
msgstr ""

#: ../../contributing/frontend/index.rst:166
#: ../../contributing/frontend/index.rst:245
msgid "Client"
msgstr ""

#: ../../contributing/frontend/index.rst:167
#: ../../contributing/frontend/index.rst:261
msgid "i18n/Jed"
msgstr ""

#: ../../contributing/frontend/index.rst:172
msgid ""
"Modules are the core of the CKAN website, every component that is "
"interactive on the page should be a module. These are then initialized by "
"including a ``data-module`` attribute on an element on the page. For "
"example:"
msgstr ""

#: ../../contributing/frontend/index.rst:178
msgid "::"
msgstr ""

#: ../../contributing/frontend/index.rst:178
msgid "<select name=\"format\" data-module=\"autocomplete\"></select>"
msgstr ""

#: ../../contributing/frontend/index.rst:180
msgid ""
"The idea is to create small isolated components that can easily be tested. "
"They should ideally not use any global objects, all functionality should be "
"provided to them via a \"sandbox\" object."
msgstr ""

#: ../../contributing/frontend/index.rst:184
msgid ""
"There is a global factory that can be used to create new modules and jQuery "
"and Localisation methods are available via ``this.sandbox.jQuery`` and "
"``this.sandbox.translate()`` respectively. To save typing these two common "
"objects we can take advantage of JavaScript closures and use an alternative "
"module syntax that accepts a factory function."
msgstr ""

#: ../../contributing/frontend/index.rst:207
msgid ""
"A guide on creating your own modules is located in the :doc:`javascript-"
"module-tutorial` guide."
msgstr ""

#: ../../contributing/frontend/index.rst:211
msgid "Publisher/subscriber"
msgstr ""

#: ../../contributing/frontend/index.rst:213
msgid ""
"There is a simple pub/sub module included under ``ckan.pubsub`` it's methods"
" are available to modules via "
"``this.sandbox.publish/subscribe/unsubscribe``. This can be used to publish "
"messages between modules."
msgstr ""

#: ../../contributing/frontend/index.rst:218
msgid ""
"Modules should use the publish/subscribe methods to talk to each other and "
"allow different areas of the UI to update where relevant."
msgstr ""

#: ../../contributing/frontend/index.rst:247
msgid ""
"Ideally no module should use jQuery.ajax() to make XHR requests to the CKAN "
"API, all functionality should be provided via the client object."
msgstr ""

#: ../../contributing/frontend/index.rst:263
msgid ""
"`Jed <http://slexaxton.github.com/Jed/>`_ is a Gettext implementation in "
"JavaScript. It is used throughout the application to create translatable "
"strings. An instance of Jed is available on the ``ckan.i18n`` object."
msgstr ""

#: ../../contributing/frontend/index.rst:267
msgid ""
"Modules get access to the ``translate()`` function via both the initial "
"factory function and the ``this.sandbox.translate()`` object."
msgstr ""

#: ../../contributing/frontend/index.rst:270
msgid ""
"String interpolation can be provided using the `sprintf formatting "
"<http://www.diveintojavascript.com/projects/javascript-sprintf>`_. We always"
" use the named arguments to keep in line with the Python translations. And "
"we name the translate function passed into ``ckan.module()`` ``_``."
msgstr ""

#: ../../contributing/frontend/index.rst:298
msgid "Life cycle"
msgstr ""

#: ../../contributing/frontend/index.rst:300
msgid ""
"CKAN modules are intialised on dom ready. The ``ckan.module.initialize()`` "
"will look for all elements on the page with a ``data-module`` attribute and "
"attempt to create an instance."
msgstr ""

#: ../../contributing/frontend/index.rst:308
msgid ""
"The module will be created with the element, any options object extracted "
"from ``data-module-*`` attributes and a new sandbox instance."
msgstr ""

#: ../../contributing/frontend/index.rst:311
msgid ""
"Once created the modules ``initialize()`` method will be called allowing the"
" module to set themselves up."
msgstr ""

#: ../../contributing/frontend/index.rst:314
msgid ""
"Modules should also provide a ``teardown()`` method this isn't used at the "
"moment except in the unit tests to restore state but may become useful in "
"the future."
msgstr ""

#: ../../contributing/frontend/index.rst:319
msgid "Internationalization"
msgstr ""

#: ../../contributing/frontend/index.rst:321
msgid ""
"All strings within modules should be internationalized. Strings can be set "
"in the ``options.i18n`` object and there is a ``.i18n()`` helper for "
"retrieving them."
msgstr ""

#: ../../contributing/frontend/index.rst:357
msgid "jQuery plugins"
msgstr ""

#: ../../contributing/frontend/index.rst:359
msgid ""
"Any functionality that is not directly related to ckan should be packaged up"
" in a jQuery plug-in if possible. This keeps the modules containing only "
"ckan specific code and allows plug-ins to be reused on other sites."
msgstr ""

#: ../../contributing/frontend/index.rst:364
msgid ""
"Examples of these are ``jQuery.fn.slug()``, ``jQuery.fn.slugPreview()`` and "
"``jQuery.proxyAll()``."
msgstr ""

#: ../../contributing/frontend/index.rst:368
msgid "Unit tests"
msgstr ""

#: ../../contributing/frontend/index.rst:370
msgid ""
"There is currently a test suite available at: "
"http://localhost:5000/base/test/index.html"
msgstr ""

#: ../../contributing/frontend/index.rst:373
msgid ""
"Every core component, module and plugin should have a set of unit tests. "
"Tests can be filtered using the ``grep={regexp}`` query string parameter."
msgstr ""

#: ../../contributing/frontend/index.rst:377
msgid "The libraries used for the tests are as follows."
msgstr ""

#: ../../contributing/frontend/index.rst:379
msgid ""
"`Mocha <http://visionmedia.github.com/mocha/>`_: A test runner using a BDD "
"style syntax."
msgstr ""

#: ../../contributing/frontend/index.rst:381
msgid ""
"`Chai <http://chaijs.com>`_: An assertion library (we use the assert style)."
msgstr ""

#: ../../contributing/frontend/index.rst:383
msgid ""
"`Sinon <http://sinonjs.org>`_: A stubbing library, can stub objects, timers "
"and ajax requests."
msgstr ""

#: ../../contributing/frontend/index.rst:386
msgid ""
"Each file has a description block for it's top level object and then within "
"that a nested description for each method that is to be tested::"
msgstr ""

#: ../../contributing/frontend/index.rst:400
msgid ""
"The ```.beforeEach()``` and ```.afterEach()``` callbacks can be used to "
"setup objects for testing (all blocks share the same scope so test variables"
" can be attached)::"
msgstr ""

#: ../../contributing/frontend/index.rst:425
msgid ""
"Templates can also be loaded using the ``.loadFixtures()`` method that is "
"available in all test contexts. Tests can be made asynchronous by setting a "
"``done`` argument in the callback (Mocha checks the arity of the "
"functions)::"
msgstr ""
