# 
msgid ""
msgstr ""
"Project-Id-Version: sphinx test 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-19 15:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../contributing/python.rst:3
msgid "Python coding standards"
msgstr ""

#: ../../contributing/python.rst:5
msgid "For Python code style follow `PEP 8`_ plus the guidelines below."
msgstr ""

#: ../../contributing/python.rst:9
msgid "Some good links about Python code style:"
msgstr ""

#: ../../contributing/python.rst:11
msgid ""
"`Python Coding Standards "
"<http://lists.osafoundation.org/pipermail/dev/2003-March/000479.html>`_ from"
" Yahoo"
msgstr ""

#: ../../contributing/python.rst:12
msgid ""
"`Google Python Style Guide <http://google-"
"styleguide.googlecode.com/svn/trunk/pyguide.html>`_"
msgstr ""

#: ../../contributing/python.rst:16
msgid ":doc:`string-i18n`"
msgstr ""

#: ../../contributing/python.rst:17
msgid "How to mark strings for translation."
msgstr ""

#: ../../contributing/python.rst:21
msgid "Use single quotes"
msgstr ""

#: ../../contributing/python.rst:23
msgid ""
"Use single-quotes for string literals, e.g. ``'my-identifier'``, *but* use "
"double-quotes for strings that are likely to contain single-quote characters"
" as part of the string itself (such as error messages, or any strings "
"containing natural language), e.g.  ``\"You've got an error!\"``."
msgstr ""

#: ../../contributing/python.rst:28
msgid ""
"Single-quotes are easier to read and to type, but if a string contains "
"single-quote characters then double-quotes are better than escaping the "
"single-quote characters or wrapping the string in double single-quotes."
msgstr ""

#: ../../contributing/python.rst:32
msgid "We also use triple single-quotes for docstrings, see `Docstrings`_."
msgstr ""

#: ../../contributing/python.rst:37
msgid "Imports"
msgstr ""

#: ../../contributing/python.rst:39
msgid ""
"Don't use ``from module import *`` or ``from module import name``. Instead "
"just ``import module`` and then access names with ``module.name``. See "
"`Idioms and Anti-Idioms in Python`_."
msgstr ""

#: ../../contributing/python.rst:43
msgid "You can make long module names more concise by aliasing them::"
msgstr ""

#: ../../contributing/python.rst:47
msgid "and then access it with ``baz`` in your code."
msgstr ""

#: ../../contributing/python.rst:49
msgid ""
"Make all imports at the start of the file, after the module docstring. "
"Imports should be grouped in the following order:"
msgstr ""

#: ../../contributing/python.rst:52
msgid "Standard library imports"
msgstr ""

#: ../../contributing/python.rst:53
msgid "Third-party imports"
msgstr ""

#: ../../contributing/python.rst:54
msgid "CKAN imports"
msgstr ""

#: ../../contributing/python.rst:59
msgid "Logging"
msgstr ""

#: ../../contributing/python.rst:61
msgid ""
"We use `the Python standard library's logging module "
"<http://docs.python.org/2.6/library/logging.html>`_ to log messages in CKAN,"
" e.g.::"
msgstr ""

#: ../../contributing/python.rst:70
msgid "When logging:"
msgstr ""

#: ../../contributing/python.rst:72
msgid "Keep log messages short."
msgstr ""

#: ../../contributing/python.rst:74
msgid ""
"Don't include object representations in the log message.  It *is* useful to "
"include a domain model identifier where appropriate."
msgstr ""

#: ../../contributing/python.rst:77
msgid ""
"Choose an appropriate log-level (DEBUG, INFO, ERROR, WARNING or CRITICAL, "
"see `Python's Logging HOWTO`_)."
msgstr ""

#: ../../contributing/python.rst:83
msgid "String formatting"
msgstr ""

#: ../../contributing/python.rst:85
msgid ""
"Don't use the old ``%s`` style string formatting, e.g. ``\"i am a %s\" % "
"sub``. This kind of string formatting is not helpful for "
"internationalization and is going away in Python 3."
msgstr ""

#: ../../contributing/python.rst:89
msgid ""
"Use the `new .format() method`_ instead, and give meaningful names to each "
"replacement field, for example::"
msgstr ""

#: ../../contributing/python.rst:99
msgid "Docstrings"
msgstr ""

#: ../../contributing/python.rst:103
msgid ""
"We want CKAN's docstrings to be clear and easy to read for programmers who "
"are smart and competent but who may not know a lot of CKAN technical jargon "
"and whose first language may not be English. We also want it to be easy to "
"maintain the docstrings and keep them up to date with the actual behaviour "
"of the code as it changes over time. So:"
msgstr ""

#: ../../contributing/python.rst:109
msgid ""
"All modules and all public functions, classes and methods exported by a "
"module should normally have docstrings (see `PEP 257`_)."
msgstr ""

#: ../../contributing/python.rst:111
msgid "Keep docstrings short, describe only what's necessary and no more."
msgstr ""

#: ../../contributing/python.rst:112
msgid "Keep docstrings simple: use plain, concise English."
msgstr ""

#: ../../contributing/python.rst:113
msgid "Try to avoid repetition."
msgstr ""

#: ../../contributing/python.rst:117
msgid "PEP 257 (Docstring Conventions)"
msgstr ""

#: ../../contributing/python.rst:119
msgid ""
"Generally, follow `PEP 257`_ for docstrings. We'll only describe the ways "
"that CKAN differs from or extends PEP 257 below."
msgstr ""

#: ../../contributing/python.rst:122
msgid "CKAN docstrings deviate from PEP 257 in a couple of ways:"
msgstr ""

#: ../../contributing/python.rst:124
msgid ""
"We use ``'''triple single quotes'''`` around docstrings, not ``\"\"\"triple "
"double quotes\"\"\"`` (put triple single quotes around one-line docstrings "
"as well as multi-line ones, it makes them easier to expand later)"
msgstr ""

#: ../../contributing/python.rst:127
msgid ""
"We use Sphinx domain object cross-references to cross-reference to other "
"code objects (see below)"
msgstr ""

#: ../../contributing/python.rst:129
msgid ""
"We use Sphinx directives for documenting parameters, exceptions and return "
"values (see below)"
msgstr ""

#: ../../contributing/python.rst:136
msgid "Referencing other code objects with ``:py:``"
msgstr ""

#: ../../contributing/python.rst:138
msgid ""
"If you want to refer to another Python or JavaScript module, function or "
"class etc. in a docstring (or from a ``.rst`` file), use `Sphinx domain "
"object cross-references <http://sphinx-doc.org/domains.html#cross-"
"referencing-python-objects>`_, for example::"
msgstr ""

#: ../../contributing/python.rst:150
msgid ""
"For the full list of types of cross-reference,  see the `Sphinx docs <http"
"://sphinx-doc.org/domains.html#cross-referencing-python-objects>`_."
msgstr ""

#: ../../contributing/python.rst:156
msgid ""
"These kinds of cross-references can also be used to reference other types of"
" object besides Python objects, for example `JavaScript objects <http"
"://sphinx-doc.org/domains.html#the-javascript-domain>`_ or even command-line"
" scripts and options and environment variables. See `the Sphinx docs <http"
"://sphinx-doc.org/domains.html>`_ for the full details."
msgstr ""

#: ../../contributing/python.rst:163
msgid ""
"Cross-referencing objects like this means that Sphinx will style the "
"reference with the right CSS, and hyperlink the reference to the docs for "
"the referenced object. Sphinx can also generate error messages when non-"
"existent objects are referenced, which helps to keep the docs up to date as "
"the code changes."
msgstr ""

#: ../../contributing/python.rst:170
msgid ""
"Sphinx will render a cross-reference like "
"``:py:func:`ckan.logic.action.create.package_create``` as the full name of "
"the function: :py:func:`ckan.logic.action.create.package_create`. If you "
"want the docs to contain only the local name of the function (e.g. just "
":py:func:`~ckan.logic.action.create.package_create`), put a ``~`` at the "
"start::"
msgstr ""

#: ../../contributing/python.rst:179
msgid ""
"(But you should always use the fully qualified name in your docstring or "
"``*.rst`` file.)"
msgstr ""

#: ../../contributing/python.rst:184
msgid "Documenting exceptions raised with ``:raises``"
msgstr ""

#: ../../contributing/python.rst:186
msgid ""
"There are a few guidelines that CKAN code should follow regarding "
"exceptions:"
msgstr ""

#: ../../contributing/python.rst:188
msgid ""
"**All public functions that CKAN exports for third-party code to use should "
"document any exceptions they raise**. See below for how to document "
"exceptions raised."
msgstr ""

#: ../../contributing/python.rst:192
msgid ""
"For example the template helper functions in :py:mod:`ckan.lib.helpers`, "
"anything imported into :py:mod:`ckan.plugins.toolkit`, and all of the action"
" API functions defined in :py:mod:`ckan.logic.action`, should list "
"exceptions raised in their docstrings."
msgstr ""

#: ../../contributing/python.rst:197
msgid ""
"This is because CKAN themes, extensions and API clients need to be able to "
"call CKAN code without crashing, so they need to know what exceptions they "
"should handle (and extension developers shouldn't have to understand the "
"CKAN core source code)."
msgstr ""

#: ../../contributing/python.rst:202
msgid ""
"On the other hand, **internal functions that are only used within CKAN "
"shouldn't list exceptions in their docstrings**."
msgstr ""

#: ../../contributing/python.rst:205
msgid ""
"This is because it would be difficult to keep all the exception lists up to "
"date with the actual code behaviour, so the docstrings would become more "
"misleading than useful."
msgstr ""

#: ../../contributing/python.rst:209
msgid "**Code should only raise exceptions from within its allowed set**."
msgstr ""

#: ../../contributing/python.rst:211
msgid ""
"Each module in CKAN has a set of zero or more exceptions, defined somewhere "
"near the module, that code in that module is allowed to raise. For example "
"``ckan/logic/__init__.py`` defines a number of exception types for code in "
"``ckan/logic/`` to use. CKAN code should never raise exceptions types "
"defined elsewhere in CKAN, in third-party code or in the Python standard "
"library."
msgstr ""

#: ../../contributing/python.rst:218
msgid ""
"**All code should catch any exceptions raised by called functions**, and "
"either handle the exception, re-raise the exception (if it's from the code's"
" set of allowed exception types), or wrap the exception in an allowed "
"exception type and re-raise it."
msgstr ""

#: ../../contributing/python.rst:223
msgid ""
"This is to make it easy for a CKAN core developer to look at the source code"
" of an internal function, scan it for the keyword ``raise``, and see what "
"types of exception the function may raise, so they know what exceptions they"
" need to catch if they're going to call the function. Developers shouldn't "
"have to read the source of all the functions that a function calls (and the "
"functions they call...) to find out what exceptions they needs to catch to "
"call a function without crashing."
msgstr ""

#: ../../contributing/python.rst:236
msgid ""
"Use ``:raises:`` to document exceptions raised by public functions. The "
"docstring should say what type of exception is raised and under what "
"conditions. Use ``:py:class:`` to reference exception types. For example::"
msgstr ""

#: ../../contributing/python.rst:251
msgid "Sphinx field lists"
msgstr ""

#: ../../contributing/python.rst:253
msgid ""
"Use `Sphinx field lists`_ for documenting the parameters, exceptions and "
"returns of functions:"
msgstr ""

#: ../../contributing/python.rst:256
msgid "Use ``:param`` and ``:type`` to describe each parameter"
msgstr ""

#: ../../contributing/python.rst:257
msgid "Use ``:returns`` and ``:rtype`` to describe each return"
msgstr ""

#: ../../contributing/python.rst:258
msgid "Use ``:raises`` to describe each exception raised"
msgstr ""

#: ../../contributing/python.rst:260
msgid "Example of a short docstring:"
msgstr ""

#: ../../contributing/python.rst:272
msgid "Example of a longer docstring:"
msgstr ""

#: ../../contributing/python.rst:295
msgid ""
"The phrases that follow ``:param foo:``, ``:type foo:``, or ``:returns:`` "
"should not start with capital letters or end with full stops. These should "
"be short phrases and not full sentences. If more detail is required put it "
"in the function description instead."
msgstr ""

#: ../../contributing/python.rst:300
msgid ""
"Indicate optional arguments by ending their descriptions with ``(optional)``"
" in brackets. Where relevant also indicate the default value: ``(optional, "
"default: 5)``."
msgstr ""

#: ../../contributing/python.rst:306
msgid ""
"You can also use a little inline `reStructuredText markup`_ in docstrings, "
"e.g. ``*stars for emphasis*`` or ````double-backticks for literal text````"
msgstr ""

#: ../../contributing/python.rst:314
msgid "Action API docstrings"
msgstr ""

#: ../../contributing/python.rst:316
msgid ""
"Docstrings from CKAN's action API are processed with `autodoc`_ and included"
" in the API chapter of CKAN's documentation. The intended audience of these "
"docstrings is users of the CKAN API and not (just) CKAN core developers."
msgstr ""

#: ../../contributing/python.rst:320
msgid ""
"In the Python source each API function has the same two arguments "
"(``context`` and ``data_dict``), but the docstrings should document the keys"
" that the functions read from ``data_dict`` and not ``context`` and "
"``data_dict`` themselves, as this is what the user has to POST in the JSON "
"dict when calling the API."
msgstr ""

#: ../../contributing/python.rst:326
msgid ""
"Where practical, it's helpful to give examples of param and return values in"
" API docstrings."
msgstr ""

#: ../../contributing/python.rst:329
msgid ""
"CKAN datasets used to be called packages and the old name still appears in "
"the source, e.g. in function names like ``package_list()``. When documenting"
" functions like this write dataset not package, but the first time you do "
"this put package after it in brackets to avoid any confusion, e.g."
msgstr ""

#: ../../contributing/python.rst:339
msgid "Example of a ckan.logic.action API docstring:"
msgstr ""

#: ../../contributing/python.rst:363
msgid "Some helpful tools for Python code quality"
msgstr ""

#: ../../contributing/python.rst:365
msgid ""
"There are various tools that can help you to check your Python code for PEP8"
" conformance and general code quality. We recommend using them."
msgstr ""

#: ../../contributing/python.rst:368
msgid ""
"`pep8`_ checks your Python code against some of the style conventions in PEP"
" 8. As mentioned above, only perform style clean-ups on master to help avoid"
" spurious merge conflicts."
msgstr ""

#: ../../contributing/python.rst:372
msgid ""
"`pylint`_ analyzes Python source code looking for bugs and signs of poor "
"quality."
msgstr ""

#: ../../contributing/python.rst:375
msgid "`pyflakes`_ also analyzes Python programs to detect errors."
msgstr ""

#: ../../contributing/python.rst:377
msgid "`flake8`_ combines both pep8 and pyflakes into a single tool."
msgstr ""

#: ../../contributing/python.rst:379
msgid ""
"`Syntastic`_ is a Vim plugin with support for flake8, pyflakes and pylint."
msgstr ""
