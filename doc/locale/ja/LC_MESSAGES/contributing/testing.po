# 
msgid ""
msgstr ""
"Project-Id-Version: sphinx test 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-19 15:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../contributing/testing.rst:3
msgid "Testing coding standards"
msgstr ""

#: ../../contributing/testing.rst:5
msgid ""
"**All new code, or changes to existing code, should have new or updated "
"tests before being merged into master**. This document gives some guidelines"
" for developers who are writing tests or reviewing code for CKAN."
msgstr ""

#: ../../contributing/testing.rst:12
msgid "Transitioning from legacy to new tests"
msgstr ""

#: ../../contributing/testing.rst:14
msgid ""
"CKAN is an old code base with a large legacy test suite in "
":mod:`ckan.tests`. The legacy tests are difficult to maintain and extend, "
"but are too many to be replaced all at once in a single effort.  So we're "
"following this strategy:"
msgstr ""

#: ../../contributing/testing.rst:19
msgid "A new test suite has been started in :mod:`ckan.new_tests`."
msgstr ""

#: ../../contributing/testing.rst:20
msgid ""
"For now, we'll run both the legacy tests and the new tests before merging "
"something into the master branch."
msgstr ""

#: ../../contributing/testing.rst:22
msgid ""
"Whenever we add new code, or change existing code, we'll add new-style tests"
" for it."
msgstr ""

#: ../../contributing/testing.rst:24
msgid ""
"If you change the behavior of some code and break some legacy tests, "
"consider adding new tests for that code and deleting the legacy tests, "
"rather than updating the legacy tests."
msgstr ""

#: ../../contributing/testing.rst:27
msgid ""
"Now and then, we'll write a set of new tests to cover part of the code, and "
"delete the relevant legacy tests. For example if you want to refactor some "
"code that doesn't have good tests, write a set of new-style tests for it "
"first, refactor, then delete the relevant legacy tests."
msgstr ""

#: ../../contributing/testing.rst:32
msgid ""
"In this way we can incrementally extend the new tests to cover CKAN one "
"\"island of code\" at a time, and eventually we can delete the legacy "
":mod:`ckan.tests` directory entirely."
msgstr ""

#: ../../contributing/testing.rst:39
msgid "Guidelines for writing new-style tests"
msgstr ""

#: ../../contributing/testing.rst:41
msgid "We want the tests in :mod:`ckan.new_tests` to be:"
msgstr ""

#: ../../contributing/testing.rst:53
msgid "Fast"
msgstr ""

#: ../../contributing/testing.rst:44
msgid ""
"Don't share setup code between tests (e.g. in test class ``setup()`` or "
"``setup_class()`` methods, saved against the ``self`` attribute of test "
"classes, or in test helper modules)."
msgstr ""

#: ../../contributing/testing.rst:48
msgid ""
"Instead write helper functions that create test objects and return them, and"
" have each test method call just the helpers it needs to do the setup that "
"it needs."
msgstr ""

#: ../../contributing/testing.rst:52
msgid ""
"Where appropriate, use the ``mock`` library to avoid pulling in other parts "
"of CKAN (especially the database), see :ref:`mock`."
msgstr ""

#: ../../contributing/testing.rst:59
msgid "Independent"
msgstr ""

#: ../../contributing/testing.rst:56
msgid ""
"Each test module, class and method should be able to be run on its own."
msgstr ""

#: ../../contributing/testing.rst:58
msgid ""
"Tests shouldn't be tightly coupled to each other, changing a test shouldn't "
"affect other tests."
msgstr ""

#: ../../contributing/testing.rst:78
msgid "Clear"
msgstr ""

#: ../../contributing/testing.rst:62
msgid ""
"It should be quick and easy to see what went wrong when a test fails, or to "
"see what a test does and how it works if you have to debug or update a test."
" If you think the test or helper method isn't clear by itself, add "
"docstrings."
msgstr ""

#: ../../contributing/testing.rst:67
msgid ""
"You shouldn't have to figure out what a complex test method does, or go and "
"look up a lot of code in other files to understand a test method."
msgstr ""

#: ../../contributing/testing.rst:70
msgid ""
"Tests should follow the canonical form for a unit test, see :ref:`test "
"recipe`."
msgstr ""

#: ../../contributing/testing.rst:73
msgid "Write lots of small, simple test methods not a few big, complex tests."
msgstr ""

#: ../../contributing/testing.rst:75
msgid "Each test method should test just One Thing."
msgstr ""

#: ../../contributing/testing.rst:77
msgid ""
"The name of a test method should clearly explain the intent of the test. See"
" :ref:`naming`."
msgstr ""

#: ../../contributing/testing.rst:86
msgid "Easy to find"
msgstr ""

#: ../../contributing/testing.rst:81
msgid ""
"It should be easy to know where to add new tests for some new or changed "
"code, or to find the existing tests for some code."
msgstr ""

#: ../../contributing/testing.rst:84
msgid "See :ref:`organization`"
msgstr ""

#: ../../contributing/testing.rst:86
msgid "See :ref:`naming`."
msgstr ""

#: ../../contributing/testing.rst:91
msgid "Easy to write"
msgstr ""

#: ../../contributing/testing.rst:89
msgid ""
"Writing lots of small, clear and simple tests that all follow similar "
"recipes and organization should make tests easy to write, as well as easy to"
" read."
msgstr ""

#: ../../contributing/testing.rst:93
msgid ""
"The follow sections give some more specific guidelines and tips for writing "
"CKAN tests."
msgstr ""

#: ../../contributing/testing.rst:100
msgid "How should tests be organized?"
msgstr ""

#: ../../contributing/testing.rst:102
msgid ""
"The organization of test modules in :mod:`ckan.new_tests` mirrors the "
"organization of the source modules in :mod:`ckan`::"
msgstr ""

#: ../../contributing/testing.rst:131
msgid ""
"There are a few exceptional test modules that don't fit into this structure,"
" for example PEP8 tests and coding standards tests. These modules can just "
"go in the top-level ``ckan/new_tests/`` directory. There shouldn't be too "
"many of these."
msgstr ""

#: ../../contributing/testing.rst:139
msgid "Naming test methods"
msgstr ""

#: ../../contributing/testing.rst:141
msgid ""
"`The name of a test method should clearly explain the intent of the test "
"<http://docs.pylonsproject.org/en/latest/community/testing.html#rule-name-"
"tcms-to-indicate-what-they-test>`_."
msgstr ""

#: ../../contributing/testing.rst:143
msgid ""
"Test method names are printed out when tests fail, so the user can often see"
" what went wrong without having to look into the test file. When they do "
"need to look into the file to debug or update a test, the test name helps to"
" clarify the test."
msgstr ""

#: ../../contributing/testing.rst:148
msgid ""
"Do this even if it means your method name gets really long, since we don't "
"write code that calls our test methods there's no advantage to having short "
"test method names."
msgstr ""

#: ../../contributing/testing.rst:152
msgid ""
"Some modules in CKAN contain large numbers of loosely related functions. For"
" example, :mod:`ckan.logic.action.update` contains all functions for "
"updating things in CKAN. This means that "
":mod:`ckan.new_tests.logic.action.test_update` is going to contain an even "
"larger number of test functions."
msgstr ""

#: ../../contributing/testing.rst:158
msgid ""
"So as well as the name of each test method explaining the intent of the "
"test, it's important to name the test function after the function it's "
"testing, for example all the tests for ``user_update`` should be named "
"``test_user_update_*``."
msgstr ""

#: ../../contributing/testing.rst:163
msgid "Good test names:"
msgstr ""

#: ../../contributing/testing.rst:165
msgid "``test_user_update_with_id_that_does_not_exist``"
msgstr ""

#: ../../contributing/testing.rst:166
msgid "``test_user_update_with_no_id``"
msgstr ""

#: ../../contributing/testing.rst:167
msgid "``test_user_update_with_invalid_name``"
msgstr ""

#: ../../contributing/testing.rst:169
msgid "Bad test names:"
msgstr ""

#: ../../contributing/testing.rst:171
msgid "``test_user_update``"
msgstr ""

#: ../../contributing/testing.rst:172
msgid "``test_update_pkg_1``"
msgstr ""

#: ../../contributing/testing.rst:173
msgid "``test_package``"
msgstr ""

#: ../../contributing/testing.rst:178
msgid "Recipe for a test method"
msgstr ""

#: ../../contributing/testing.rst:180
msgid ""
"The `Pylons Unit Testing Guidelines "
"<http://docs.pylonsproject.org/en/latest/community/testing.html#tips-for-"
"avoiding-bad-unit-tests>`_ give the following recipe for all unit test "
"methods to follow:"
msgstr ""

#: ../../contributing/testing.rst:183
msgid "Set up the preconditions for the method / function being tested."
msgstr ""

#: ../../contributing/testing.rst:184
msgid ""
"Call the method / function exactly one time, passing in the values "
"established in the first step."
msgstr ""

#: ../../contributing/testing.rst:186
msgid "Make assertions about the return value, and / or any side effects."
msgstr ""

#: ../../contributing/testing.rst:187
msgid "Do absolutely nothing else."
msgstr ""

#: ../../contributing/testing.rst:189
msgid ""
"Most CKAN tests should follow this form. Here's an example of a simple "
"action function test demonstrating the recipe:"
msgstr ""

#: ../../contributing/testing.rst:196
msgid ""
"One common exception is when you want to use a ``for`` loop to call the "
"function being tested multiple times, passing it lots of different arguments"
" that should all produce the same return value and/or side effects. For "
"example, this test from :py:mod:`ckan.new_tests.logic.action.test_update`:"
msgstr ""

#: ../../contributing/testing.rst:205
msgid ""
"The behavior of :py:func:`~ckan.logic.action.update.user_update` is the same"
" for every invalid value. We do want to test "
":py:func:`~ckan.logic.action.update.user_update` with lots of different "
"invalid names, but we obviously don't want to write a dozen separate test "
"methods that are all the same apart from the value used for the invalid user"
" name. We don't really want to define a helper method and a dozen test "
"methods that call it either. So we use a simple loop. Technically this test "
"calls the function being tested more than once, but there's only one line of"
" code that calls it."
msgstr ""

#: ../../contributing/testing.rst:217
msgid "How detailed should tests be?"
msgstr ""

#: ../../contributing/testing.rst:219
msgid ""
"Generally, what we're trying to do is test the *interfaces* between modules "
"in a way that supports modularization: if you change the code within a "
"function, method, class or module, if you don't break any of that code's "
"tests you should be able to expect that CKAN as a whole will not be broken."
msgstr ""

#: ../../contributing/testing.rst:224
msgid "As a general guideline, the tests for a function or method should:"
msgstr ""

#: ../../contributing/testing.rst:226
msgid "Test for success:"
msgstr ""

#: ../../contributing/testing.rst:228
msgid "Test the function with typical, valid input values"
msgstr ""

#: ../../contributing/testing.rst:229
msgid "Test with valid, edge-case inputs"
msgstr ""

#: ../../contributing/testing.rst:230
msgid ""
"If the function has multiple parameters, test them in different combinations"
msgstr ""

#: ../../contributing/testing.rst:233
msgid "Test for failure:"
msgstr ""

#: ../../contributing/testing.rst:235
msgid ""
"Test that the function fails correctly (e.g. raises the expected type of "
"exception) when given likely invalid inputs (for example, if the user passes"
" an invalid user_id as a parameter)"
msgstr ""

#: ../../contributing/testing.rst:238
msgid "Test that the function fails correctly when given bizarre input"
msgstr ""

#: ../../contributing/testing.rst:240
msgid ""
"Test that the function behaves correctly when given unicode characters as "
"input"
msgstr ""

#: ../../contributing/testing.rst:243
msgid ""
"Cover the interface of the function: test all the parameters and features of"
" the function"
msgstr ""

#: ../../contributing/testing.rst:250
msgid "Creating test objects: :py:mod:`ckan.new_tests.factories`"
msgstr ""

#: ../../contributing/testing.rst:257
msgid "Test helper functions: :mod:`ckan.new_tests.helpers`"
msgstr ""

#: ../../contributing/testing.rst:266
msgid "Mocking: the ``mock`` library"
msgstr ""

#: ../../contributing/testing.rst:268
msgid ""
"We use the `mock library <http://www.voidspace.org.uk/python/mock/>`_ to "
"replace parts of CKAN with mock objects. This allows a CKAN function to be "
"tested independently of other parts of CKAN or third-party libraries that "
"the function uses. This generally makes the test simpler and faster "
"(especially when :py:mod:`ckan.model` is mocked out so that the tests don't "
"touch the database). With mock objects we can also make assertions about "
"what methods the function called on the mock object and with which "
"arguments."
msgstr ""

#: ../../contributing/testing.rst:278
msgid ""
"Overuse of mocking is discouraged as it can make tests difficult to "
"understand and maintain. Mocking can be useful and make tests both faster "
"and simpler when used appropriately. Some rules of thumb:"
msgstr ""

#: ../../contributing/testing.rst:282
msgid "Don't mock out more than one or two objects in a single test method."
msgstr ""

#: ../../contributing/testing.rst:284
msgid ""
"Don't use mocking in more functional-style tests. For example the action "
"function tests in :py:mod:`ckan.new_tests.logic.action` and the frontend "
"tests in :py:mod:`ckan.new_tests.controllers` are functional tests, and "
"probably shouldn't do any mocking."
msgstr ""

#: ../../contributing/testing.rst:289
msgid ""
"Do use mocking in more unit-style tests. For example the authorization "
"function tests in :py:mod:`ckan.new_tests.logic.auth`, the converter and "
"validator tests in :py:mod:`ckan.new_tests.logic.auth`, and most (all?) lib "
"tests in :py:mod:`ckan.new_tests.lib` are unit tests and should use mocking "
"when necessary (often it's possible to unit test a method in isolation from "
"other CKAN code without doing any mocking, which is ideal)."
msgstr ""

#: ../../contributing/testing.rst:296
msgid ""
"In these kind of tests we can often mock one or two objects in a simple and "
"easy to understand way, and make the test both simpler and faster."
msgstr ""

#: ../../contributing/testing.rst:300
msgid ""
"A mock object is a special object that allows user code to access any "
"attribute name or call any method name (and pass any parameters) on the "
"object, and the code will always get another mock object back:"
msgstr ""

#: ../../contributing/testing.rst:317
msgid ""
"When a test needs a mock object to actually have some behavior besides "
"always returning other mock objects, it can set the value of a certain "
"attribute on the mock object, set the return value of a certain method, "
"specify that a certain method should raise a certain exception, etc."
msgstr ""

#: ../../contributing/testing.rst:322
msgid ""
"You should read the mock library's documentation to really understand what's"
" going on, but here's an example of a test from "
":py:mod:`ckan.new_tests.logic.auth.test_update` that tests the "
":py:func:`~ckan.logic.auth.update.user_update` authorization function and "
"mocks out :py:mod:`ckan.model`:"
msgstr ""

#: ../../contributing/testing.rst:334
msgid ""
"The following sections will give specific guidelines and examples for "
"writing tests for each module in CKAN."
msgstr ""

#: ../../contributing/testing.rst:339
msgid ""
"When we say that *all* functions should have tests in the sections below, we"
" mean all *public* functions that the module or class exports for use by "
"other modules or classes in CKAN or by extensions or templates."
msgstr ""

#: ../../contributing/testing.rst:343
msgid ""
"*Private* helper methods (with names beginning with ``_``) never have to "
"have their own tests, although they can have tests if helpful."
msgstr ""

#: ../../contributing/testing.rst:347
msgid "Writing :mod:`ckan.logic.action` tests"
msgstr ""

#: ../../contributing/testing.rst:353
msgid "Writing :mod:`ckan.logic.auth` tests"
msgstr ""

#: ../../contributing/testing.rst:359
msgid "Writing converter and validator tests"
msgstr ""

#: ../../contributing/testing.rst:361
msgid "**All converter and validator functions should have unit tests.**"
msgstr ""

#: ../../contributing/testing.rst:363
msgid ""
"Although these converter and validator functions are tested indirectly by "
"the action function tests, this may not catch all the converters and "
"validators and all their options, and converters and validators are not only"
" used by the action functions but are also available to plugins. Having unit"
" tests will also help to clarify the intended behavior of each converter and"
" validator."
msgstr ""

#: ../../contributing/testing.rst:369
msgid ""
"CKAN's action functions call "
":py:func:`ckan.lib.navl.dictization_functions.validate` to validate data "
"posted by the user. Each action function passes a schema from "
":py:mod:`ckan.logic.schema` to "
":py:func:`~ckan.lib.navl.dictization_functions.validate`. The schema gives "
":py:func:`~ckan.lib.navl.dictization_functions.validate` lists of validation"
" and conversion functions to apply to the user data. These validation and "
"conversion functions are defined in :py:mod:`ckan.logic.validators`, "
":py:mod:`ckan.logic.converters` and :py:mod:`ckan.lib.navl.validators`."
msgstr ""

#: ../../contributing/testing.rst:379
msgid ""
"Most validator and converter tests should be unit tests that test the "
"validator or converter function in isolation, without bringing in other "
"parts of CKAN or touching the database.  This requires using the ``mock`` "
"library to mock ``ckan.model``, see :ref:`mock`."
msgstr ""

#: ../../contributing/testing.rst:384
msgid ""
"When testing validators, we often want to make the same assertions in many "
"tests: assert that the validator didn't modify the ``data`` dict, assert "
"that the validator didn't modify the ``errors`` dict, assert that the "
"validator raised ``Invalid``, etc. Decorator functions are defined at the "
"top of validator test modules like "
":py:mod:`ckan.new_tests.logic.test_validators` to make these common asserts "
"easy. To use one of these decorators you have to:"
msgstr ""

#: ../../contributing/testing.rst:391
msgid ""
"Define a nested function inside your test method, that simply calls the "
"validator function that you're trying to test."
msgstr ""

#: ../../contributing/testing.rst:393
msgid "Apply the decorators that you want to this nested function."
msgstr ""

#: ../../contributing/testing.rst:394
msgid "Call the nested function."
msgstr ""

#: ../../contributing/testing.rst:396
msgid "Here's an example of a simple validator test that uses this technique:"
msgstr ""

#: ../../contributing/testing.rst:404
msgid "No tests for :mod:`ckan.logic.schema.py`"
msgstr ""

#: ../../contributing/testing.rst:410
msgid "Writing :mod:`ckan.controllers` tests"
msgstr ""

#: ../../contributing/testing.rst:416
msgid "Writing :mod:`ckan.model` tests"
msgstr ""

#: ../../contributing/testing.rst:422
msgid "Writing :mod:`ckan.lib` tests"
msgstr ""

#: ../../contributing/testing.rst:428
msgid "Writing :mod:`ckan.plugins` tests"
msgstr ""

#: ../../contributing/testing.rst:434
msgid "Writing :mod:`ckan.migration` tests"
msgstr ""

#: ../../contributing/testing.rst:440
msgid "Writing :mod:`ckan.ckanext` tests"
msgstr ""

#: ../../contributing/testing.rst:442
msgid ""
"Within extensions, follow the same guidelines as for CKAN core. For example "
"if an extension adds an action function then the action function should have"
" tests, etc."
msgstr ""
