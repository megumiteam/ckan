# 
msgid ""
msgstr ""
"Project-Id-Version: sphinx test 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-19 15:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../contributing/string-i18n.rst:3
msgid "String internationalization"
msgstr ""

#: ../../contributing/string-i18n.rst:6
msgid ""
"All user-facing Strings in CKAN Python, JavaScript and Jinja2 code should be"
" internationalized, so that our translators can then localize the strings "
"for each of the many languages that CKAN supports. This guide shows CKAN "
"developers how to internationalize strings, and what to look for regarding "
"string internationalization when reviewing a pull request."
msgstr ""

#: ../../contributing/string-i18n.rst:14
msgid ""
"*Internationalization* (or i18n) is the process of marking strings for "
"translation, so that the strings can be extracted from the source code and "
"given to translators. *Localization* (l10n) is the process of translating "
"the marked strings into different languages."
msgstr ""

#: ../../contributing/string-i18n.rst:25
msgid ":doc:`i18n`"
msgstr ""

#: ../../contributing/string-i18n.rst:23
msgid ""
"If you want to translate CKAN, this page documents the process that "
"translators follow to localize CKAN into different languages."
msgstr ""

#: ../../contributing/string-i18n.rst:30
msgid ":doc:`release-process`"
msgstr ""

#: ../../contributing/string-i18n.rst:28
msgid ""
"The processes for extracting internationalized strings from CKAN and "
"uploading them to Transifex to be translated, and for downloading the "
"translations from Transifex and loading them into CKAN to be displayed are "
"documented on this page."
msgstr ""

#: ../../contributing/string-i18n.rst:35
msgid ""
"Much of the existing code in CKAN was written before we had these "
"guidelines, so it doesn't always do things as described on this page. When "
"writing new code you should follow the guidelines on this page, not the "
"existing code."
msgstr ""

#: ../../contributing/string-i18n.rst:43
msgid "Internationalizating strings in Jinja2 templates"
msgstr ""

#: ../../contributing/string-i18n.rst:45
msgid ""
"Most user-visible strings should be in the Jinja2 templates, rather than in "
"Python or JavaScript code. This doesn't really matter to translators, but "
"it's good for the code to separate logic and content.  Of course this isn't "
"always possible. For example when error messages are delivered through the "
"API, there's no Jinja2 template involved."
msgstr ""

#: ../../contributing/string-i18n.rst:51
msgid ""
"The preferred way to internationalize strings in Jinja2 templates is by "
"using `the trans tag from Jinja2's i18n extension "
"<http://jinja.pocoo.org/docs/templates/#i18n>`_, which is available to all "
"CKAN core and extension templates and snippets."
msgstr ""

#: ../../contributing/string-i18n.rst:55
msgid "Most of the following examples are taken from the Jinja2 docs."
msgstr ""

#: ../../contributing/string-i18n.rst:57
msgid "To internationalize a string put it inside a ``{% trans %}`` tag:"
msgstr ""

#: ../../contributing/string-i18n.rst:63
msgid ""
"You can also use variables from the template's namespace inside a ``{% trans"
" %}``:"
msgstr ""

#: ../../contributing/string-i18n.rst:70
msgid "(Only variable tags are allowed inside trans tags, not statements.)"
msgstr ""

#: ../../contributing/string-i18n.rst:72
msgid ""
"You can pass one or more arguments to the ``{% trans %}`` tag to bind "
"variable names for use within the tag:"
msgstr ""

#: ../../contributing/string-i18n.rst:83
msgid ""
"To handle different singular and plural forms of a string, use a ``{% "
"pluralize %}`` tag:"
msgstr ""

#: ../../contributing/string-i18n.rst:94
msgid ""
"(In English the first string will be rendered if ``count`` is 1, the second "
"otherwise.  For other languages translators will be able to provide their "
"own strings for different values of ``count``.)"
msgstr ""

#: ../../contributing/string-i18n.rst:98
msgid ""
"The first variable in the block (``count`` in the example above) is used to "
"determine which of the singular or plural forms to use. Alternatively you "
"can explicitly specify which variable to use:"
msgstr ""

#: ../../contributing/string-i18n.rst:110
msgid ""
"The ``{% trans %}`` tag is preferable, but if you need to pluralize a string"
" within a Jinja2 expression you can use the ``_()`` and ``ungettext()`` "
"functions:"
msgstr ""

#: ../../contributing/string-i18n.rst:118
msgid ""
"To use variables in strings, use Python `format string syntax`_ and then "
"call the ``.format()`` method on the string that ``_()`` returns:"
msgstr ""

#: ../../contributing/string-i18n.rst:127
msgid "Singular and plural forms are handled by ``ungettext()``:"
msgstr ""

#: ../../contributing/string-i18n.rst:136
msgid ""
"There are also ``gettext()`` and ``ngettext()`` functions available to "
"templates, but we recommend using ``_()`` and ``ungettext()`` for "
"consistency with CKAN's Python code. This deviates from the Jinja2 docs, "
"which do use ``gettext()`` and ``ngettext()``."
msgstr ""

#: ../../contributing/string-i18n.rst:142
msgid ""
"``_()`` is not an alias for ``gettext()`` in CKAN's Jinja2 templates, "
"``_()`` is the function provided by Pylons, whereas ``gettext()`` is the "
"version provided by Jinja2, their behaviors are not exactly the same."
msgstr ""

#: ../../contributing/string-i18n.rst:149
msgid "Internationalizing strings in Python code"
msgstr ""

#: ../../contributing/string-i18n.rst:151
msgid ""
"CKAN uses the :py:func:`~pylons.i18n._` and "
":py:func:`~pylons.i18n.ungettext` functions from the "
"`pylons.i18n.translation`_ module to internationalize strings in Python "
"code."
msgstr ""

#: ../../contributing/string-i18n.rst:157
msgid ""
"Core CKAN modules should import :py:func:`~ckan.common._` and "
":py:func:`~ckan.common.ungettext` from :py:mod:`ckan.common`, i.e. ``from "
"ckan.common import _, ungettext`` (don't import "
":py:func:`pylons.i18n.translation._` directly, for example)."
msgstr ""

#: ../../contributing/string-i18n.rst:162
msgid ""
"CKAN plugins should import :py:mod:`ckan.plugins.toolkit` and use "
":py:func:`ckan.plugins.toolkit._` and "
":py:func:`ckan.plugins.toolkit.ungettext`, i.e. do ``import "
"ckan.plugins.toolkit as toolkit`` and then use ``toolkit._()`` and "
"``toolkit.ungettext()`` (see :doc:`/extensions/plugins-toolkit`)."
msgstr ""

#: ../../contributing/string-i18n.rst:168
msgid "To internationalize a string pass it to the ``_()`` function:"
msgstr ""

#: ../../contributing/string-i18n.rst:174
msgid ""
"To use variables in a string, call the ``.format()`` method on the "
"translated string that ``_()`` returns:"
msgstr ""

#: ../../contributing/string-i18n.rst:184
msgid ""
"To handle different plural and singular forms of a string, use "
"``ungettext()``:"
msgstr ""

#: ../../contributing/string-i18n.rst:196
msgid "Internationalizing strings in JavaScript code"
msgstr ""

#: ../../contributing/string-i18n.rst:203
msgid "General guidelines for internationalizing strings"
msgstr ""

#: ../../contributing/string-i18n.rst:205
msgid ""
"Below are some guidelines to follow when marking your strings for "
"translation. These apply to strings in Jinja2 templates or in Python or "
"JavaScript code. These are mostly meant to make life easier for translators,"
" and help to improve the quality of CKAN's translations:"
msgstr ""

#: ../../contributing/string-i18n.rst:210
msgid ""
"Leave as much HTML and other code out of the translation string as possible."
msgstr ""

#: ../../contributing/string-i18n.rst:212
msgid ""
"For example, don't include surrounding ``<p>...</p>`` tags in the marked "
"string. These aren't necessary for the translator to do the translation, and"
" if the translator accidentally changes them in the translation string the "
"HTML will be broken."
msgstr ""

#: ../../contributing/string-i18n.rst:217
#: ../../contributing/string-i18n.rst:242
#: ../../contributing/string-i18n.rst:257
#: ../../contributing/string-i18n.rst:283
#: ../../contributing/string-i18n.rst:311
#: ../../contributing/string-i18n.rst:327
msgid "Good:"
msgstr ""

#: ../../contributing/string-i18n.rst:223
msgid "Bad (``<p>`` tags don't need to be in the translation string):"
msgstr ""

#: ../../contributing/string-i18n.rst:229
msgid "But don't split a string into separate strings."
msgstr ""

#: ../../contributing/string-i18n.rst:231
msgid ""
"Translators need as much context as possible to translate strings well, and "
"if you split a string up into separate strings and mark each for translation"
" separately, translators must translate each of these separate strings in "
"isolation. Also, some languages may need to change the order of words in a "
"sentence or even change the order of sentences in a paragraph, splitting "
"into separate strings makes assumptions about word order."
msgstr ""

#: ../../contributing/string-i18n.rst:238
msgid ""
"It's better to leave HTML tags or other code in strings than to split a "
"string.  For example, it's often best to leave HTML ``<a>`` tags in rather "
"than split a string."
msgstr ""

#: ../../contributing/string-i18n.rst:248
msgid "Bad (text will be difficult to translate or untranslatable):"
msgstr ""

#: ../../contributing/string-i18n.rst:254
msgid ""
"You can split long strings over multiple lines using parentheses to avoid "
"long lines, Python will concatenate them into a single string:"
msgstr ""

#: ../../contributing/string-i18n.rst:264
msgid ""
"Leave unnecessary whitespace out of translatable strings, but do put "
"punctuation into translatable strings."
msgstr ""

#: ../../contributing/string-i18n.rst:267
msgid ""
"Try not to make translators translate strings that don't need to be "
"translated."
msgstr ""

#: ../../contributing/string-i18n.rst:270
msgid ""
"For example, ``'legacy_templates'`` is the name of a directory, it doesn't "
"need to be marked for translation."
msgstr ""

#: ../../contributing/string-i18n.rst:273
msgid "Mark singular and plural forms of strings correctly."
msgstr ""

#: ../../contributing/string-i18n.rst:275
msgid ""
"In Jinja2 templates this means using ``{% trans %}`` and ``{% pluralize %}``"
" or ``ungettext()``. In Python it means using ``ungettext()``. See above for"
" examples."
msgstr ""

#: ../../contributing/string-i18n.rst:279
msgid ""
"Singular and plural forms work differently in different languages. For "
"example English has singular and plural nouns, but Slovenian has singular, "
"dual and plural."
msgstr ""

#: ../../contributing/string-i18n.rst:293
msgid ""
"Bad (this assumes that all languages have the same plural forms as English):"
msgstr ""

#: ../../contributing/string-i18n.rst:303
msgid ""
"Don't use `old-style %s string formatting "
"<https://docs.python.org/2/library/stdtypes.html#string-formatting>`_ in "
"Python, use the new `.format() method`_ instead."
msgstr ""

#: ../../contributing/string-i18n.rst:307
msgid ""
"Strings formatted with ``.format()`` give translators more context. The "
"``.format()`` method is also more expressive, and is the preferred way to "
"format strings in Python 3."
msgstr ""

#: ../../contributing/string-i18n.rst:317
#: ../../contributing/string-i18n.rst:333
msgid "Bad (not enough context for translators):"
msgstr ""

#: ../../contributing/string-i18n.rst:323
msgid "Use descriptive names for replacement fields in strings."
msgstr ""

#: ../../contributing/string-i18n.rst:325
msgid "This gives translators more context."
msgstr ""

#: ../../contributing/string-i18n.rst:339
msgid "Worse (doesn't work in Python 2.6):"
msgstr ""

#: ../../contributing/string-i18n.rst:345
msgid ""
"Use ``TRANSLATORS:`` comments to provide extra context for translators for "
"difficult to find, very short, or obscure strings."
msgstr ""

#: ../../contributing/string-i18n.rst:348
msgid "For example, in Python:"
msgstr ""

#: ../../contributing/string-i18n.rst:355
msgid "In Jinja2:"
msgstr ""

#: ../../contributing/string-i18n.rst:362
msgid ""
"These comments end up in the ``ckan.pot`` file and translators will see them"
" when they're translating the strings (Transifex shows them, for example)."
msgstr ""

#: ../../contributing/string-i18n.rst:367
msgid ""
"In both Python and Jinja2, the comment must be on the line before the line "
"with the ``_()``, ``ungettext()`` or ``{% trans %}``, and must start with "
"the exact string ``TRANSLATORS:`` (in upper-case and with the colon). This "
"string is configured in ``setup.cfg``."
msgstr ""
