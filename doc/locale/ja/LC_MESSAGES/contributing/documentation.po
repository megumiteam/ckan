# 
msgid ""
msgstr ""
"Project-Id-Version: sphinx test 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-19 15:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../contributing/documentation.rst:3
msgid "Writing documentation"
msgstr ""

#: ../../contributing/documentation.rst:7
msgid ""
"This section gives some guidelines to help us to write consistent and good "
"quality documentation for CKAN."
msgstr ""

#: ../../contributing/documentation.rst:10
msgid ""
"Documentation isn't source code, and documentation standards don't need to "
"be followed as rigidly as coding standards do. In the end, some "
"documentation is better than no documentation, it can always be improved "
"later. So the guidelines below are soft rules."
msgstr ""

#: ../../contributing/documentation.rst:15
msgid ""
"Having said that, we suggest just one hard rule: **no new feature (or change"
" to an existing feature) should be missing from the docs** (but see "
"`todo`_)."
msgstr ""

#: ../../contributing/documentation.rst:22
msgid ""
"Jacob Kaplon-Moss's `Writing Great Documentation "
"<http://jacobian.org/writing/great-documentation/>`_"
msgstr ""

#: ../../contributing/documentation.rst:22
msgid ""
"A series of blog posts about writing technical docs, a lot of our guidelines"
" were based on this."
msgstr ""

#: ../../contributing/documentation.rst:27
msgid ""
"The quickest and easiest way to contribute documentation to CKAN is to sign "
"up for a free GitHub account and simply edit the `CKAN Wiki "
"<https://github.com/ckan/ckan/wiki>`_. Docs started on the wiki can make it "
"onto `docs.ckan.org`_ later. If you do want to contribute to "
"`docs.ckan.org`_ directly, follow the instructions on this page."
msgstr ""

#: ../../contributing/documentation.rst:33
msgid ""
"**Tip**: Use the reStructuredText markup format when creating a wiki page, "
"since reStructuredText is the format that docs.ckan.org uses, this will make"
" moving the documentation from the wiki into docs.ckan.org later easier."
msgstr ""

#: ../../contributing/documentation.rst:42
#: ../../contributing/documentation.rst:627
msgid "Getting started"
msgstr ""

#: ../../contributing/documentation.rst:44
msgid ""
"This section will walk you through downloading the source files for CKAN's "
"docs, editing them, and submitting your work to the CKAN project."
msgstr ""

#: ../../contributing/documentation.rst:47
msgid ""
"CKAN's documentation is created using `Sphinx <http://sphinx-doc.org/>`_, "
"which in turn uses `Docutils <http://docutils.sourceforge.net/>`_ "
"(reStructuredText is part of Docutils). Some useful links to bookmark:"
msgstr ""

#: ../../contributing/documentation.rst:51
msgid "`Sphinx's reStructuredText Primer <http://sphinx-doc.org/rest.html>`_"
msgstr ""

#: ../../contributing/documentation.rst:52
msgid ""
"`reStructuredText cheat sheet "
"<http://docutils.sourceforge.net/docs/user/rst/cheatsheet.txt>`_"
msgstr ""

#: ../../contributing/documentation.rst:53
msgid ""
"`reStructuredText quick reference "
"<http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_"
msgstr ""

#: ../../contributing/documentation.rst:54
msgid ""
"`Sphinx Markup Constructs <http://sphinx-doc.org/markup/index.html>`_ is a "
"full list of the markup that Sphinx adds on top of Docutils."
msgstr ""

#: ../../contributing/documentation.rst:57
msgid ""
"The source files for the docs are in `the doc directory of the CKAN git repo"
" <https://github.com/ckan/ckan/tree/master/doc>`_. The following sections "
"will walk you through the process of making changes to these source files, "
"and submitting your work to the CKAN project."
msgstr ""

#: ../../contributing/documentation.rst:62
msgid "Install CKAN into a virtualenv"
msgstr ""

#: ../../contributing/documentation.rst:64
msgid ""
"Create a `Python virtual environment "
"<http://pypi.python.org/pypi/virtualenv>`_ (virtualenv), activate it, "
"install CKAN into the virtual environment, and install the dependencies "
"necessary for building CKAN. In this example we'll create a virtualenv in a "
"folder called ``pyenv``. Run these commands in a terminal:"
msgstr ""

#: ../../contributing/documentation.rst:70
msgid ""
"In CKAN 2.0 and earlier the requirements file was called ``pip-requirements-"
"docs.txt``, not ``dev-requirements.txt`` as below."
msgstr ""

#: ../../contributing/documentation.rst:83
msgid "Build the docs"
msgstr ""

#: ../../contributing/documentation.rst:85
msgid ""
"You should now be able to build the CKAN documentation locally. Make sure "
"your virtual environment is activated, and then run this command::"
msgstr ""

#: ../../contributing/documentation.rst:90
msgid ""
"Now you can open the built HTML files in "
"``pyenv/src/ckan/build/sphinx/html``, e.g.::"
msgstr ""

#: ../../contributing/documentation.rst:97
msgid "Edit the reStructuredText files"
msgstr ""

#: ../../contributing/documentation.rst:99
msgid ""
"To make changes to the documentation, use a text editor to edit the ``.rst``"
" files in ``pyenv/src/ckan/doc/``. Save your changes and then build the docs"
" again (``python setup.py build_sphinx``) and open the HTML files in a web "
"browser to preview your changes."
msgstr ""

#: ../../contributing/documentation.rst:104
msgid ""
"Once your docs are ready to submit to the CKAN project, follow the steps in "
":doc:`/contributing/pull-requests`."
msgstr ""

#: ../../contributing/documentation.rst:111
msgid "How the docs are organized"
msgstr ""

#: ../../contributing/documentation.rst:113
msgid ""
"It's important that the docs have a clear, simple and extendable structure "
"(and that we keep it that way as we add to them), so that both readers and "
"writers can easily answer the questions: If you need to find the docs for a "
"particular feature, where do you look? If you need to add a new page to the "
"docs, where should it go?"
msgstr ""

#: ../../contributing/documentation.rst:119
msgid ""
"As :doc:`/index` explains, the documentation is organized into several "
"guides, each for a different audience: a user guide for web interface users,"
" an extending guide for extension developers, a contributing guide for core "
"contributors, etc. These guides are ordered with the simplest guides first, "
"and the most advanced last."
msgstr ""

#: ../../contributing/documentation.rst:125
msgid ""
"In the source, each one of these guides is a subdirectory with its own "
"``index.rst`` containing its own ``.. toctree::`` directive that lists all "
"of the other files in that subdirectory. The root toctree just lists each of"
" these ``*/index.rst`` files."
msgstr ""

#: ../../contributing/documentation.rst:130
msgid ""
"When adding a new page to the docs, the first question to ask yourself is: "
"who is this page for? That should tell you which subdirectory to put your "
"page in. You then need to add your page to that subdirectory's ``index.rst``"
" file."
msgstr ""

#: ../../contributing/documentation.rst:134
msgid ""
"Within each guide, the docs are broken up by topic. For example, the "
"extending guide has a page for the writing extensions tutorial, a page about"
" testing extensions, a page for the plugins toolkit reference, etc. Again, "
"the topics are ordered with the simplest first and the most advanced last, "
"and reference pages generally at the very end."
msgstr ""

#: ../../contributing/documentation.rst:140
msgid ""
":doc:`The changelog </changelog>` is one page that doesn't fit into any of "
"the guides, because it's relevant to all of the different audiences and not "
"only to one particular guide. So the changelog is simply a top-level page on"
" its own. Hopefully we won't need to add many more of these top-level pages."
" If you're thinking about adding a page that serves two or more audiences at"
" once, ask yourself whether you can break that up into separate pages and "
"put each into one of the guides, then link them together using `seealso`_ "
"boxes."
msgstr ""

#: ../../contributing/documentation.rst:149
msgid ""
"Within a particular page, for example a new page documenting a new feature, "
"our suggestion for what sections the page might have is:"
msgstr ""

#: ../../contributing/documentation.rst:152
msgid ""
"**Overview**: a conceptual overview of or introduction to the feature. "
"Explain what the feature provides, why someone might want to use it, and "
"introduce any key concepts users need to understand. This is the **why** of "
"the feature."
msgstr ""

#: ../../contributing/documentation.rst:157
msgid ""
"If it's developer documentation (extension writing, theming, API, or core "
"developer docs), maybe put an architecture guide here."
msgstr ""

#: ../../contributing/documentation.rst:160
msgid ""
"**Tutorials**: tutorials and examples for how to setup the feature, and how "
"to use the feature. This is the **how**."
msgstr ""

#: ../../contributing/documentation.rst:163
msgid ""
"**Reference**: any reference docs such as config options or API functions."
msgstr ""

#: ../../contributing/documentation.rst:165
msgid ""
"**Troubleshooting**: common error messages and problems, FAQs, how to "
"diagnose problems."
msgstr ""

#: ../../contributing/documentation.rst:170
msgid "Subdirectories"
msgstr ""

#: ../../contributing/documentation.rst:172
msgid ""
"Some of the guides have subdirectories within them. For example "
":doc:`/maintaining/index` contains a subdirectory "
":doc:`/maintaining/installing/index` that collects together the various "
"pages about installing CKAN with its own "
"``doc/maintaining/installing/index.rst`` file."
msgstr ""

#: ../../contributing/documentation.rst:178
msgid ""
"While subdirectories are useful, we recommend that you **don't put further "
"subdirectories inside the subdirectories**, try to keep it to at most two "
"levels of subdirectories inside the ``doc`` directory. Keep it simple, "
"otherwise the structure becomes confusing, difficult to get an overview of "
"and difficult to navigate."
msgstr ""

#: ../../contributing/documentation.rst:186
msgid "Linear ordering"
msgstr ""

#: ../../contributing/documentation.rst:188
msgid ""
"Keep in mind that Sphinx requires the docs to have a simple, linear "
"ordering. With HTML pages it's possible to design structure where, for "
"example, someone reads half of a page, then clicks on a link in the middle "
"of the page to go and read another page, then goes back to the middle of the"
" first page and continues reading where they left off. While technically you"
" can do this in Sphinx as well, it isn't a good idea, things like the "
"navigation links, table of contents, and PDF version will break, users will "
"end up going in circles, and the structure becomes confusing."
msgstr ""

#: ../../contributing/documentation.rst:197
msgid ""
"So the pages of our Sphinx docs need to have a simple linear ordering - one "
"page follows another, like in a book."
msgstr ""

#: ../../contributing/documentation.rst:205
msgid "Sphinx"
msgstr ""

#: ../../contributing/documentation.rst:207
msgid "This section gives some useful tips about using Sphinx."
msgstr ""

#: ../../contributing/documentation.rst:211
msgid "Don't introduce any new Sphinx warnings"
msgstr ""

#: ../../contributing/documentation.rst:213
msgid ""
"When you build the docs, Sphinx prints out warnings about any broken cross-"
"references, syntax errors, etc. We aim not to have any of these warnings, so"
" when adding to or editing the docs make sure your changes don't introduce "
"any new ones."
msgstr ""

#: ../../contributing/documentation.rst:218
msgid ""
"It's best to delete the ``build`` directory and completely rebuild the docs,"
" to check for any warnings::"
msgstr ""

#: ../../contributing/documentation.rst:225
msgid "Maximum line length"
msgstr ""

#: ../../contributing/documentation.rst:227
msgid ""
"As with Python code, try to limit all lines to a maximum of 79 characters."
msgstr ""

#: ../../contributing/documentation.rst:231
msgid "versionadded and versionchanged"
msgstr ""

#: ../../contributing/documentation.rst:233
msgid ""
"Use Sphinx's ``versionadded`` and ``versionchanged`` directives to mark new "
"or changed features. For example::"
msgstr ""

#: ../../contributing/documentation.rst:247
msgid ""
"With ``versionchanged`` you usually need to add a sentence explaining what "
"changed (you can also do this with ``versionadded`` if you want)::"
msgstr ""

#: ../../contributing/documentation.rst:264
msgid "Cross-references and links"
msgstr ""

#: ../../contributing/documentation.rst:266
msgid ""
"Whenever mentioning another page or section in the docs, an external "
"website, a configuration setting, or a class, exception or function, etc. "
"try to cross-reference it. Using proper Sphinx cross-references is better "
"than just typing things like \"see above/below\" or \"see section foo\" "
"because Sphinx cross-refs are hyperlinked, and because if the thing you're "
"referencing to gets moved or deleted Sphinx will update the cross-reference "
"or print a warning."
msgstr ""

#: ../../contributing/documentation.rst:275
msgid "Cross-referencing to another file"
msgstr ""

#: ../../contributing/documentation.rst:277
msgid "Use ``:doc:`` to cross-reference to other files by filename::"
msgstr ""

#: ../../contributing/documentation.rst:281
msgid ""
"If the file you're editing is in a subdir within the ``doc`` dir, you may "
"need to use an absolute reference (starting with a ``/``)::"
msgstr ""

#: ../../contributing/documentation.rst:286
msgid ""
"See `Cross-referencing documents <http://sphinx-doc.org/markup/inline.html"
"#cross-referencing-documents>`_ for details."
msgstr ""

#: ../../contributing/documentation.rst:291
msgid "Cross-referencing a section within a file"
msgstr ""

#: ../../contributing/documentation.rst:293
msgid ""
"Use ``:ref:`` to cross-reference to particular sections within the same or "
"another file. First you have to add a label before the section you want to "
"cross-reference to::"
msgstr ""

#: ../../contributing/documentation.rst:303
msgid "then from elsewhere cross-reference to the section like this::"
msgstr ""

#: ../../contributing/documentation.rst:307
msgid ""
"see `Cross-referencing arbitrary locations <http://sphinx-"
"doc.org/markup/inline.html#cross-referencing-arbitrary-locations>`_."
msgstr ""

#: ../../contributing/documentation.rst:311
msgid "Cross-referencing to CKAN config settings"
msgstr ""

#: ../../contributing/documentation.rst:313
msgid ""
"Whenever you mention a CKAN config setting, make it link to the docs for "
"that setting in :doc:`/maintaining/configuration` by using ``:ref:`` and the"
" name of the config setting::"
msgstr ""

#: ../../contributing/documentation.rst:319
msgid ""
"This works because all CKAN config settings are documented in "
":doc:`/maintaining/configuration`, and every setting has a Sphinx label that"
" is exactly the same as the name of the setting, for example::"
msgstr ""

#: ../../contributing/documentation.rst:336
msgid ""
"If you add a new config setting to CKAN, make sure to document like this it "
"in :doc:`/maintaining/configuration`."
msgstr ""

#: ../../contributing/documentation.rst:341
msgid "Cross-referencing to a Python object"
msgstr ""

#: ../../contributing/documentation.rst:343
msgid ""
"Whenever you mention a Python function, method, object, class, exception, "
"etc. cross-reference it using a Sphinx domain object cross-reference. See "
":ref:`Referencing other code objects`."
msgstr ""

#: ../../contributing/documentation.rst:349
msgid "Changing the link text of a cross-reference"
msgstr ""

#: ../../contributing/documentation.rst:351
msgid ""
"With ``:doc:`` ``:ref:`` and other kinds of link, if you want the link text "
"to be different from the title of the thing you're referencing, do this::"
msgstr ""

#: ../../contributing/documentation.rst:360
msgid "Cross-referencing to an external page"
msgstr ""

#: ../../contributing/documentation.rst:362
msgid ""
"The syntax for linking to external URLs is slightly different from cross-"
"referencing, you have to add a trailing underscore::"
msgstr ""

#: ../../contributing/documentation.rst:367
msgid "or to define a URL once and then link to it in multiple places, do::"
msgstr ""

#: ../../contributing/documentation.rst:374
msgid ""
"see `Hyperlinks <http://sphinx-doc.org/rest.html#hyperlinks>`_ for details."
msgstr ""

#: ../../contributing/documentation.rst:380
msgid "Substitutions"
msgstr ""

#: ../../contributing/documentation.rst:382
msgid ""
"`Substitutions <http://sphinx-doc.org/rest.html#substitutions>`_ are a "
"useful way to define a value that's needed in many places (eg. a command, "
"the location of a file, etc.) in one place and then reuse it many times."
msgstr ""

#: ../../contributing/documentation.rst:386
msgid "You define the value once like this::"
msgstr ""

#: ../../contributing/documentation.rst:390
msgid "and then reuse it like this::"
msgstr ""

#: ../../contributing/documentation.rst:394
msgid ""
"``|production.ini|`` will be replaced with the full value "
"``/etc/ckan/default/production.ini``."
msgstr ""

#: ../../contributing/documentation.rst:397
msgid ""
"Substitutions can also be useful for achieving consistent spelling and "
"capitalization of names like |restructuredtext|, |postgres|, |nginx|, etc."
msgstr ""

#: ../../contributing/documentation.rst:400
msgid ""
"The ``rst_epilog`` setting in ``doc/conf.py`` contains a list of global "
"substitutions that can be used from any file."
msgstr ""

#: ../../contributing/documentation.rst:403
msgid ""
"Substitutions can't immediately follow certain characters (with no space in-"
"between) or the substitution won't work. If this is a problem, you can "
"insert an escaped space, the space won't show up in the generated output and"
" the substitution will work::"
msgstr ""

#: ../../contributing/documentation.rst:410
msgid ""
"Similarly, certain characters are not allowed to immediately follow a "
"substitution (without a space) or the substitution won't work. In this case "
"you can just escape the following characters, the escaped character will "
"show up in the output and the substitution will work::"
msgstr ""

#: ../../contributing/documentation.rst:417
msgid ""
"Also see :ref:`parsed-literals` below for using substitutions in code "
"blocks."
msgstr ""

#: ../../contributing/documentation.rst:423
msgid "Parsed literals"
msgstr ""

#: ../../contributing/documentation.rst:425
msgid ""
"Normally things like links and substitutions don't work within a literal "
"code block. You can make them work by using a ``parsed-literal`` block, for "
"example::"
msgstr ""

#: ../../contributing/documentation.rst:437
msgid "autodoc"
msgstr ""

#: ../../contributing/documentation.rst:441
msgid ""
"We try to use `autodoc`_ to pull documentation from source code docstrings "
"into our Sphinx docs, wherever appropriate. This helps to avoid duplicating "
"documentation and also to keep the documentation closer to the code and "
"therefore more likely to be kept up to date."
msgstr ""

#: ../../contributing/documentation.rst:446
msgid ""
"Whenever you're writing reference documentation for modules, classes, "
"functions or methods, exceptions, attributes, etc. you should probably be "
"using autodoc. For example, we use autodoc for the :ref:`api-reference`, the"
" :doc:`/extensions/plugin-interfaces`, etc."
msgstr ""

#: ../../contributing/documentation.rst:451
msgid "For how to write docstrings, see :ref:`docstrings`."
msgstr ""

#: ../../contributing/documentation.rst:456
msgid "todo"
msgstr ""

#: ../../contributing/documentation.rst:458
msgid ""
"No new feature (or change to an existing feature) should be missing from the"
" docs. It's best to document new features or changes as you implement them, "
"but if you really need to merge something without docs then at least add a "
"`todo directive <http://sphinx-doc.org/ext/todo.html>`_ to mark where docs "
"need to be added or updated (if it's a new feature, make a new page or "
"section just to contain the ``todo``)::"
msgstr ""

#: ../../contributing/documentation.rst:476
msgid "deprecated"
msgstr ""

#: ../../contributing/documentation.rst:478
msgid ""
"Use Sphinx's `deprecated directive <http://sphinx-doc.org/markup/para.html"
"#directive-deprecated>`_ to mark things as deprecated in the docs::"
msgstr ""

#: ../../contributing/documentation.rst:486
msgid "seealso"
msgstr ""

#: ../../contributing/documentation.rst:488
msgid ""
"Often one page of the docs is related to other pages of the docs or to "
"external pages. A `seealso block <http://sphinx-"
"doc.org/markup/para.html?highlight=seealso#directive-seealso>`_ is a nice "
"way to include a list of related links::"
msgstr ""

#: ../../contributing/documentation.rst:500
msgid ""
"Seealso boxes are particularly useful when two pages are related, but don't "
"belong next to each other in the same section of the docs. For example, we "
"have docs about how to upgrade CKAN, these belong in the maintainer's guide "
"because they're for maintainers. We also have docs about how to do a new "
"release, these belong in the contributing guide because they're for "
"developers. But both sections are about CKAN releases, so we link each to "
"the other using seealso boxes."
msgstr ""

#: ../../contributing/documentation.rst:511
msgid "Code examples"
msgstr ""

#: ../../contributing/documentation.rst:513
msgid ""
"If you're going to paste example code into the docs, or add a tutorial about"
" how to do something with code, then:"
msgstr ""

#: ../../contributing/documentation.rst:516
msgid ""
"The code should be in standalone Python, HTML, JavaScript etc. files, not "
"pasted directly into the ``.rst`` files. You then pull the code into your "
"``.rst`` file using a Sphinx ``.. literalinclude::`` directive (see example "
"below)."
msgstr ""

#: ../../contributing/documentation.rst:521
msgid ""
"The code in the standalone files should be a complete working example, with "
"tests. Note that not all of the code from the example needs to appear in the"
" docs, you can include just parts of it using ``.. literalinclude::``, but "
"the example code needs to be complete so it can be tested."
msgstr ""

#: ../../contributing/documentation.rst:527
msgid ""
"This is so that we don't end up with a lot of broken, outdated examples and "
"tutorials in the docs because breaking changes have been made to CKAN since "
"the docs were written. If your example code has tests, then when someone "
"makes a change in CKAN that breaks your example those tests will fail, and "
"they'll know they have to fix their code or update your example."
msgstr ""

#: ../../contributing/documentation.rst:533
msgid ""
"The :doc:`plugins tutorial </extensions/tutorial>` is an example of this "
"technique. `ckanext/example_iauthfunctions "
"<https://github.com/ckan/ckan/tree/master/ckanext/example_iauthfunctions>`_ "
"is a complete and working example extension. The tests for the extension are"
" in `ckanext/example_iauthfunctions/tests "
"<https://github.com/ckan/ckan/tree/master/ckanext/example_iauthfunctions/tests>`_."
" Different parts of the |reStructuredtext| file for the tutorial pull in "
"different parts of the example code as needed, like this:"
msgstr ""

#: ../../contributing/documentation.rst:546
msgid ""
"``literalinclude`` has a few useful options for pulling out just the part of"
" the code that you want. See the `Sphinx docs for literalinclude <http"
"://sphinx-doc.org/markup/code.html?highlight=literalinclude#directive-"
"literalinclude>`_ for details."
msgstr ""

#: ../../contributing/documentation.rst:550
msgid ""
"You may notice that `ckanext/example_iauthfunctions "
"<https://github.com/ckan/ckan/tree/master/ckanext/example_iauthfunctions>`_ "
"contains multiple versions of the same example plugin, ``plugin_v1.py``, "
"``plugin_v2.py``, etc. This is because the tutorial walks the user through "
"first making a trivial plugin, and then adding more and more advanced "
"features one by one. Each step of the tutorial needs to have its own "
"complete, standalone example plugin with its own tests."
msgstr ""

#: ../../contributing/documentation.rst:557
msgid ""
"For more examples, look into the source files for other tutorials in the "
"docs."
msgstr ""

#: ../../contributing/documentation.rst:564
msgid "Style"
msgstr ""

#: ../../contributing/documentation.rst:569
msgid ""
"This section covers things like what tone to use, how to capitalize section "
"titles, etc.  Having a consistent style will make the docs nice and easy to "
"read and give them a complete, quality feel."
msgstr ""

#: ../../contributing/documentation.rst:575
msgid "Use American spelling"
msgstr ""

#: ../../contributing/documentation.rst:577
msgid ""
"Use American spellings everywhere: organization, authorization, realize, "
"customize, initialize, color, etc. There's a list here: "
"https://wiki.ubuntu.com/EnglishTranslation/WordSubstitution"
msgstr ""

#: ../../contributing/documentation.rst:583
msgid "Spellcheck"
msgstr ""

#: ../../contributing/documentation.rst:585
msgid "Please spellcheck documentation before merging it into master!"
msgstr ""

#: ../../contributing/documentation.rst:589
msgid "Commonly used terms"
msgstr ""

#: ../../contributing/documentation.rst:591
msgid "CKAN"
msgstr ""

#: ../../contributing/documentation.rst:592
msgid "Should be written in ALL-CAPS."
msgstr ""

#: ../../contributing/documentation.rst:593
msgid "email"
msgstr ""

#: ../../contributing/documentation.rst:594
msgid "Use email not e-mail."
msgstr ""

#: ../../contributing/documentation.rst:598
msgid ""
"|postgres|, |sqlalchemy|, |nginx|, |python|, |sqlite|, |javascript|, etc."
msgstr ""

#: ../../contributing/documentation.rst:596
msgid ""
"These should always be capitalized as shown above (including capital first "
"letters for Python and Nginx even when they're not the first word in a "
"sentence). ``doc/conf.py`` defines substitutions for each of these so you "
"don't have to remember them, see :ref:`sphinx substitutions`."
msgstr ""

#: ../../contributing/documentation.rst:600
msgid "Web site"
msgstr ""

#: ../../contributing/documentation.rst:601
msgid "Two words, with Web always capitalized"
msgstr ""

#: ../../contributing/documentation.rst:602
msgid "frontend"
msgstr ""

#: ../../contributing/documentation.rst:603
msgid "Not front-end"
msgstr ""

#: ../../contributing/documentation.rst:605
msgid "command line"
msgstr ""

#: ../../contributing/documentation.rst:605
msgid ""
"Two words, not commandline or command-line (this is because we want to be "
"like `Neal Stephenson <http://www.cryptonomicon.com/beginning.html>`_)"
msgstr ""

#: ../../contributing/documentation.rst:611
msgid "CKAN config file or configuration file"
msgstr ""

#: ../../contributing/documentation.rst:608
msgid ""
"Not settings file, ini file, etc. Also, the **config file** contains "
"**config options** such as ``ckan.site_id``, and each config option is "
"**set** to a certain **setting** or **value** such as ``ckan.site_id = "
"demo.ckan.org``."
msgstr ""

#: ../../contributing/documentation.rst:614
msgid "Section titles"
msgstr ""

#: ../../contributing/documentation.rst:616
msgid ""
"Capitalization in section titles should follow the same rules as in normal "
"sentences: you capitalize the first word and any `proper nouns "
"<http://en.wikipedia.org/wiki/Proper_noun>`_."
msgstr ""

#: ../../contributing/documentation.rst:620
msgid ""
"This seems like the easiest way to do consistent capitalization in section "
"titles because it's a capitalization rule that we all know already (instead "
"of inventing a new one just for section titles)."
msgstr ""

#: ../../contributing/documentation.rst:624
msgid "Right:"
msgstr ""

#: ../../contributing/documentation.rst:626
msgid "Installing CKAN from package"
msgstr ""

#: ../../contributing/documentation.rst:628
msgid "Command line interface"
msgstr ""

#: ../../contributing/documentation.rst:629
msgid "Writing extensions"
msgstr ""

#: ../../contributing/documentation.rst:630
msgid "Making an API request"
msgstr ""

#: ../../contributing/documentation.rst:631
msgid "You're done!"
msgstr ""

#: ../../contributing/documentation.rst:632
msgid "Libraries available to extensions"
msgstr ""

#: ../../contributing/documentation.rst:634
msgid "Wrong:"
msgstr ""

#: ../../contributing/documentation.rst:636
msgid "Installing CKAN from Package"
msgstr ""

#: ../../contributing/documentation.rst:637
msgid "Getting Started"
msgstr ""

#: ../../contributing/documentation.rst:638
msgid "Command Line Interface"
msgstr ""

#: ../../contributing/documentation.rst:639
msgid "Writing Extensions"
msgstr ""

#: ../../contributing/documentation.rst:640
msgid "Making an API Request"
msgstr ""

#: ../../contributing/documentation.rst:641
msgid "You're Done!"
msgstr ""

#: ../../contributing/documentation.rst:642
msgid "Libraries Available To Extensions"
msgstr ""

#: ../../contributing/documentation.rst:644
msgid ""
"For lots of examples of this done right, see `Django's table of contents "
"<https://docs.djangoproject.com/en/1.5/contents/>`_."
msgstr ""

#: ../../contributing/documentation.rst:647
msgid "In Sphinx, use the following section title styles::"
msgstr ""

#: ../../contributing/documentation.rst:663
msgid ""
"If you need more than four levels of headings, you're probably doing "
"something wrong, but see: "
"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#sections"
msgstr ""

#: ../../contributing/documentation.rst:669
msgid "Be conversational"
msgstr ""

#: ../../contributing/documentation.rst:671
msgid "Write in a friendly, conversational and personal tone:"
msgstr ""

#: ../../contributing/documentation.rst:673
msgid "Use contractions like don't, doesn't, it's etc."
msgstr ""

#: ../../contributing/documentation.rst:675
msgid ""
"Use \"we\", for example *\"We'll publish a call for translations to the "
"ckan-dev and ckan-discuss mailing lists, announcing that the new version is "
"ready to be translated\"* instead of *\"A call for translations will be "
"published\"*."
msgstr ""

#: ../../contributing/documentation.rst:681
msgid ""
"Refer to the reader personally as \"you\", as if you're giving verbal "
"instructions to someone in the room: *\"First, you'll need to do X. Then, "
"when you've done Y, you can start working on Z\"* (instead of stuff like "
"*\"First X must be done, and then Y must be done...\"*)."
msgstr ""

#: ../../contributing/documentation.rst:688
msgid "Write clearly and concretely, not vaguely and abstractly"
msgstr ""

#: ../../contributing/documentation.rst:690
msgid ""
"`Politics and the English Language "
"<http://www.orwell.ru/library/essays/politics/english/e_polit/>`_ has some "
"good tips about this, including:"
msgstr ""

#: ../../contributing/documentation.rst:693
msgid ""
"Never use a metaphor, simile, or other figure of speech which you are used "
"to seeing in print."
msgstr ""

#: ../../contributing/documentation.rst:695
msgid "Never use a long word where a short one will do."
msgstr ""

#: ../../contributing/documentation.rst:696
msgid "If it's possible to cut out a word, always cut it out."
msgstr ""

#: ../../contributing/documentation.rst:697
msgid "Never use the passive when you can be active."
msgstr ""

#: ../../contributing/documentation.rst:698
msgid ""
"Never use a foreign phrase, scientific word or jargon word if you can think "
"of an everyday English equivalent."
msgstr ""

#: ../../contributing/documentation.rst:701
msgid ""
"This will make your meaning clearer and easier to understand, especially for"
" people whose first language isn't English."
msgstr ""

#: ../../contributing/documentation.rst:705
msgid "Facilitate skimming"
msgstr ""

#: ../../contributing/documentation.rst:707
msgid ""
"Readers skim technical documentation trying to quickly find what's important"
" or what they need, so break walls of text up into small, visually "
"identifiable pieces:"
msgstr ""

#: ../../contributing/documentation.rst:711
msgid ""
"Use lots of `inline markup <http://sphinx-doc.org/rest.html#inline-"
"markup>`_::"
msgstr ""

#: ../../contributing/documentation.rst:717
msgid ""
"For code samples or filenames with variable parts, uses Sphinx's `:samp: "
"<http://sphinx-doc.org/markup/inline.html#role-samp>`_ and `:file: <http"
"://sphinx-doc.org/markup/inline.html#role-file>`_ directives."
msgstr ""

#: ../../contributing/documentation.rst:722
msgid ""
"Use `lists <http://sphinx-doc.org/rest.html#lists-and-quote-like-blocks>`_ "
"to break up text."
msgstr ""

#: ../../contributing/documentation.rst:725
msgid ""
"Use ``.. note::`` and ``.. warning::``, see Sphinx's `paragraph-level markup"
" <http://sphinx-doc.org/markup/para.html#paragraph-level-markup>`_."
msgstr ""

#: ../../contributing/documentation.rst:728
msgid ""
"(|restructuredtext| actually supports lots more of these: ``attention``, "
"``error``, ``tip``, ``important``, etc. but most Sphinx themes only style "
"``note`` and ``warning``.)"
msgstr ""

#: ../../contributing/documentation.rst:732
msgid "Break text into short paragraphs of 5-6 sentences each max."
msgstr ""

#: ../../contributing/documentation.rst:734
msgid ""
"Use section and subsection headers to visualize the structure of a page."
msgstr ""
